#!/usr/bin/env node

var nip = require('..');
var fs = require('fs');
var path = require('path');
var program = require('commander');
var lsc = require('LiveScript');

program
  .version(require('../package.json').version)
  .usage('[js-code] <file ...>')
  .option('-f, --file', 'javascript file containing the js-code')
  .option('-1, --first-line-only', 'process whole file at once, not line by line')
  .option('-s, --line-splitter [splitter]', 'line spliter regex or string', '/\\r?\\n/')
  .option('-n, --line-joiner [joiner]', 'string to join lines together with', '\n')
  .option('-c, --col-splitter [spliter]', 'column splitter regex or string', '\\s+')
  ;

program.on('--help', function() {
  console.log(fs.readFileSync(__dirname + '/usage.txt').toString());
  console.log(fs.readFileSync(__dirname + '/examples.txt').toString());
});

program.parse(process.argv);


if (!program.args.length && !program.file) {
  console.error('You muse specify [js-code] or a --js-file\nsee nip --help for more info');
  return 1;
}



var callbackStr;
if (program.file) {
  callbackStr = fs.readFileSync(program.file).toString();
} else {
  callbackStr = program.args.shift();
}

var files = program.args;

if (!files.length) {

  // use stdin
  files.push('-');
}

var callback, compile_result;
try {
  compile_result = lsc.compile(callbackStr, {bare: true});
} catch (e) {
  console.log(e);
  return 1;
}

try {
  callback = new Function(['line', 'index', 'cols', 'lines'], compile_result);
} catch (e) {
  console.log(callbackStr)
  console.error("coudn't build callback function", e);
  return 1;
}

var regexize = function(regexLike) {
  return (regexLike[0] === '/') ?
    Function('return ' + regexLike)() :
    RegExp(regexLike);
}

nip({
  files: files,
  callback: callback,
  lineSeparatorRegex: regexize(program.lineSplitter),
  colSeparatorRegex: regexize(program.colSplitter),
  lineSeparator: program.lineJoiner,
  firstLineOnly: program.firstLineOnly
});
